// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.183.0/containers/python-3
{
  "name": "Python 3",
  "build": {
    "dockerfile": "Dockerfile",
    "context": "..",
    "args": {
      // Update 'VARIANT' to pick a Python version: 3, 3.6, 3.7, 3.8, 3.9
      "VARIANT": "3.12",
      // Options
      "INSTALL_NODE": "true",
      "NODE_VERSION": "lts/*"
    }
  },
  // Set *default* container specific settings.json values on container create.
  "customizations": {
    "vscode": {
      "settings": {
        "python.defaultInterpreterPath": "/usr/local/bin/python",
        "python.pythonPath": "/usr/local/bin/python",
        "python.languageServer": "Pylance",
        "python.analysis.diagnosticSeverityOverrides": {
          "reportUnusedFunction": "none"
        },
        "pylint.path": [
          "pylint"
        ],
        "flake8.path": [
          "flake8"
        ],
        "flake8.args": [
          "--config=${containerWorkspaceFolder}/grizzly-ls/pyproject.toml"
        ],
        "black-formatter.path": [
          "black"
        ],
        "black-formatter.args": [
          "--config=${containerWorkspaceFolder}/grizzly-ls/pyproject.toml"
        ],
        "pylint.args": [
          "--rcfile=${containerWorkspaceFolder}/grizzly-ls/pyproject.toml"
        ],
        "editor.formatOnSave": true,
        "python.testing.cwd": "./grizzly-ls",
        "python.testing.pytestArgs": [
          "-c",
          "./pyproject.toml",
          "-o",
          "testpaths=tests",
          "--cov-reset",
          "--cov=./src/grizzly_ls",
          "--cov-report=xml:./.coverage.xml",
          "."
        ],
        "python.testing.unittestEnabled": false,
        "python.testing.pytestEnabled": true,
        "coverage-gutters.coverageFileNames": [],
        "coverage-gutters.manualCoverageFilePaths": [
          "${containerWorkspaceFolder}/grizzly-ls/.coverage.xml"
        ],
        "coverage-gutters.ignoredPathGlobs": "**/{node_modules,venv,.venv,vendor,tests}/**",
        "editor.codeActionsOnSave": {
          "source.fixAll.eslint": true
        },
        "eslint.validate": [
          "typescript"
        ],
        "[python]": {
          "editor.defaultFormatter": "ms-python.black-formatter",
          "editor.formatOnSave": true
        },
        "[typescript]": {
          "editor.defaultFormatter": "dbaeumer.vscode-eslint"
        }
      },
      // Add the IDs of extensions you want installed when the container is created.
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance",
        "ms-python.vscode-pylance",
        "ms-python.pylint",
        "ms-python.flake8",
        "ms-python.black-formatter",
        "EditorConfig.EditorConfig",
        "oderwat.indent-rainbow",
        "eamodio.gitlens",
        "ryanluker.vscode-coverage-gutters",
        "dbaeumer.vscode-eslint"
      ]
    }
  },
  "mounts": [
    "source=/etc/timezone,target=/etc/timezone,type=bind",
    "source=/etc/localtime,target=/etc/localtime,type=bind",
    "source=grizzly-lsp-bashhistory,target=/commandhistory,type=volume"
  ],
  "runArgs": [
    "--add-host=host.docker.internal:host-gateway"
  ],
  "containerEnv": {
    "PYTHONPATH": "${containerWorkspaceFolder}/grizzly-ls/src"
  },
  "remoteEnv": {
    "PATH": "${containerEnv:PATH}:${containerWorkspaceFolder}/client/node_modules/.bin"
  },
  "postCreateCommand": "./script/install.sh",
  // Use 'forwardPorts' to make a list of ports inside the container available locally.
  // "forwardPorts": [],
  // Use 'postCreateCommand' to run commands after the container is created.
  // "postCreateCommand": "pip3 install --user -r requirements.txt",
  // Comment out connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
  "remoteUser": "vscode",
  "features": {
    "ghcr.io/devcontainers/features/docker-from-docker:1": {
      "version": "latest"
    },
    "ghcr.io/devcontainers/features/git:1": {
      "version": "os-provided"
    }
  }
}
