name: release

on:
  workflow_dispatch:
    inputs:
      component:
        type: choice
        description: 'Which components to release?'
        options:
          - client
          - server
          - both
        default: 'both'
        required: true
      level:
        type: choice
        description: 'Version level increment'
        options:
          - patch
          - minor
          - major
        default: 'patch'
        required: true
      dry-run:
        type: boolean
        description: 'Dry run (do not publish)'
        default: true
        required: true

defaults:
  run:
    shell: bash

jobs:
  pre-common:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.next-version.outputs.new_version }}

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: get latest tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
        with:
          semver_only: true
          initial_version: '1.0.0'
          with_initial_version: true

      - name: next version
        uses: actions-ecosystem/action-bump-semver@v1
        id: next-version
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag }}
          level: ${{ github.events.inputs.level }}

      - name: version
        run: |
          echo "current version is ${{ steps.get-latest-tag.outputs.tag }}"
          echo "next version is ${{ steps.next-version.outputs.new_version }}"

  server:
    runs-on: ubuntu-latest
    needs: [pre-common]
    if: ${{ github.events.inputs.component == 'both' || github.events.inputs.component == 'server' }}

    defaults:
      run:
        working-directory: ./grizzly-ls

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: create temporary release tag
        run: |
          git tag -a "v${{ needs.pre-common.outputs.version }}"

      - name: install dependencies
        run: |
          python -m pip install .[ci]

      - name: build
        run: |
          python -m build

      - name: 'publish (${{ github.events.inputs.dry-run }})'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          TWINE_NON_INTERACTIVE: true
        run: |
          if [[ "${{ github.events.inputs.dry-run }}" != "true "]]; then
            python -m twine upload dist/grizzly?ls-${{ needs.pre-common.outputs.version }}*
          else
            ls -l dist/grizzly?ls-${{ needs.pre-common.outputs.version }}*
          fi

  client:
    runs-on: ubuntu-latest
    needs: [pre-common]
    if: ${{ github.events.inputs.component == 'both' || github.events.inputs.component == 'client' }}

    defaults:
      run:
        working-directory: ./client/vscode

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: './package-lock.json'

      - name: bump version
        run: |
          npm version "${{ needs.pre-common.outputs.version }}"

      - name: install dependencies
        run: |
          npm install
          npm install -g vsce

      - name: build
        run: |
          vsce package --out out/

      - name: publish (${{ github.events.inputs.dry-run }})
        env:
          VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}
        run: |
          if [[ "${{ github.events.inputs.dry-run }}" != "true "]]; then
            vsce publish -p $VSCE_TOKEN
          else
            ls -l out/*.vsix
            unzip -t out/*.vsix || true
          fi

  post-common:
    runs-on: ubuntu-latest
    needs: [pre-common, server, client]
    if: ${{ github.events.inputs.dry-run != 'true' }}

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - uses: actions-ecosystem/action-push-tag@v1
        with:
          tag: ${{ needs.pre-common.outputs.version }}
          message: 'Release ${{ needs.pre-common.outputs.version }}'
